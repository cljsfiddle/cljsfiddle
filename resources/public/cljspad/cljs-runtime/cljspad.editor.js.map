{"version":3,"sources":["cljspad/editor.cljs"],"mappings":"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","names":["cljspad.editor/ref->editor","ref","goog.object/getValueByKeys","cljspad.editor/copy-to-clipboard","monaco-ref","e45176","editor","model","value","elem","js/document.createElement","js/document.body.appendChild","js/document.execCommand","js/document.body.removeChild","e","cljs.core.prn","cljspad.editor/run-code","compiler-state","cljspad.env/eval-form","cljspad.editor/toolbar","run","vec__45183","cljs.core.nth","loading?","_","rehook.core/use-atom-path","cljspad.editor/editor","db","monaco","height","vec__45192","vec__45195","vec__45198","rehook.core/use-atom","set-run","rehook.core/use-state","source","rehook.core.use_effect","resize","unload","clojure.string/blank?","js/window.addEventListener","G__45217","js/window","js/window.removeEventListener","js/module$monaco","ctx__45100__auto__","$__45101__auto__","map__45179","cljs.core.dissoc","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","$45177","props__45102__auto__","map__45181","cljs.core.vary_meta","rehook.dom/rehook-meta","rehook.dom/eval-hiccup","map__45188","$45186","map__45190"],"sourcesContent":["(ns cljspad.editor\n  (:require [rehook.core :as rehook]\n            [rehook.dom :refer-macros [defui]]\n            [cljspad.env :as env]\n            [goog.object :as obj]\n            [clojure.string :as str]\n            [\"monaco\" :as MonacoEditor]))\n\n(defn ^js ref->editor [ref]\n  (obj/getValueByKeys ref \"current\" \"editor\"))\n\n(defn copy-to-clipboard [monaco-ref]\n  (try (let [editor (ref->editor monaco-ref)\n             model  (.getModel editor)\n             value  (.getValue model)\n             elem   (js/document.createElement \"textarea\")]\n         (js/document.body.appendChild elem)\n         (aset elem \"value\" value)\n         (.select elem)\n         (js/document.execCommand \"copy\")\n         (js/document.body.removeChild elem)\n         true)\n       (catch :default e\n         (prn e)\n         false)))\n\n(defn run-code\n  [compiler-state ^js editor]\n  (fn []\n    (let [model (.getModel editor)\n          value (.getValue model)]\n      (env/eval-form compiler-state value))))\n\n(defui toolbar\n  [{:keys [compiler-state]} {:keys [run]}]\n  (let [[loading? _] (rehook/use-atom-path compiler-state [::env/evaluating?])\n        run (:run run)]\n    [:div.toolbar\n     [:div.button {:onClick #(run)}\n      (if loading?\n        [:span.cljspad-loading-icon]\n        [:span.cljspad-run-icon])\n      \"Run\"]]))\n\n(defui editor [{:keys [compiler-state db monaco]} {:keys [height]}]\n  (let [[monaco _] (rehook/use-atom monaco)\n        [run set-run] (rehook/use-state nil)\n        [source _] (rehook/use-atom-path db [:source])]\n    (when monaco\n      (rehook/use-effect\n       (fn []\n         (let [editor (ref->editor monaco)\n               resize (fn [] (.layout editor))\n               unload (fn []\n                        (let [model (.getModel editor)\n                              value (.getValue model)]\n                          (when-not (str/blank? value)\n                            true)))]\n           (js/window.addEventListener \"resize\" resize)\n           (set-run {:run (run-code compiler-state editor)})\n           (aset js/window \"onbeforeunload\" unload)\n           (fn []\n             (js/window.removeEventListener \"resize\" resize))))\n       [])\n\n      [:div {:style {:width \"100%\" :height height}}\n       [toolbar {:run run}]\n       [MonacoEditor {:language \"clojure\"\n                      :theme    \"vs-light\"\n                      :height   \"100%\"\n                      :width    \"100%\"\n                      :value    source\n                      :options  {:minimap {:enabled false}}\n                      :ref      monaco}]])))"]}
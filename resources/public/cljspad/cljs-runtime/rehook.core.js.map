{"version":3,"sources":["rehook/core.cljs"],"mappings":";;AAGA,AAAA,AAAMA,AACHC;AADH,AAEE,AAACC,AAAeD;;AAElB,AAAA,AAAA,AAAAE,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFE;AADJ,AAEG,AAACC,AAAgBD;;;AAFpB,AAAA,AAAA,AAAMF,AAGFE,AAAEE;AAHN,AAIG,AAACD,AAAgBD,AAAE,AAACG,AAASD;;;AAJhC,AAAA,AAAA,AAAMJ;;AAAN,AAMA,AAAA,AAAMM,AACHC,AAAEC,AAAUC;AADf,AAEE,AAAAC,AAAoB,AAACf,AAAU,AAAAoB,AAAA,AAAAC,AAAYT;AAAZ,AAAA,AAAAQ,AAAAA,AAACP,AAAAA,AAAAA;;AAAhC,AAAAG,AAAAD,AAAA,AAAA,AAAOG;AAAP,AAAAF,AAAAD,AAAA,AAAA,AAAWI;AAAX,AAEE,AAACG,AACA;AAAA,AACE,AAAMC,AAAG,AAAK,AAACC;AAAf,AACE,AAACC,AAAUb,AAAEW,AAAG,AAAKG,AAAEA,AAAEC,AAAWC;AAApB,AACE,AAAMC,AAAW,AAAChB,AAAAA,AAAAA,AAAUc,AAAAA;AACtBG,AAAW,AAACjB,AAAAA,AAAAA,AAAUe,AAAAA;AAD5B,AAEE,AAAU,AAACG,AAAEF,AAAWC;AAAxB;;AAAA,AACE,AAACX,AAAAA,AAAAA,AAAQW,AAAAA;;;;AALjC;AAAA,AAMG,AAACE,AAAapB,AAAEW;;AARtB;;AAFF,AAAA,AAAAN,AAaGC;AAbH,AAaQ,AAAAD,AAACgB,AAAMrB,AAAEE;;;AAEnB;;;AAAA,AAAMoB,AAEHtB;AAFH,AAGE,AAACD,AAAYC,AAAEuB,AAAS,AAAKT,AAAEU;AAAP,AAAUA;;;AAEpC;;;AAAA,AAAMC,AAEHzB,AAAE0B;AAFL,AAGE,AAAA,AAAAC,AAAC5B,AAAYC;AAAb,AAAgB,AAAA2B,AAACG,AAASJ;AAA1B,AAAAE,AAAAC;AAAA,AAAiC,AAAAD,AAAAC,AAACE,AAAYL","names":["rehook.core/use-state","initial-value","js/module$node_modules$react$index.useState","var_args","G__20711","rehook.core/use-effect","js/Error","f","js/module$node_modules$react$index.useEffect","deps","cljs.core/to-array","rehook.core/use-atom-fn","a","getter-fn","setter-fn","vec__20716","cljs.core.nth","p1__20715#","val","set-val","G__20719","cljs.core/deref","rehook.core.use_effect","id","cljs.core/random-uuid","cljs.core/add-watch","_","prev-state","next-state","prev-value","next-value","cljs.core._EQ_","cljs.core/remove-watch","cljs.core.swap_BANG_","rehook.core/use-atom","cljs.core/identity","v","rehook.core/use-atom-path","path","p1__20727#","p1__20728#","p2__20729#","cljs.core.get_in","cljs.core/assoc-in"],"sourcesContent":["(ns rehook.core\n  (:require [\"react\" :as react]))\n\n(defn use-state\n  [initial-value]\n  (react/useState initial-value))\n\n(defn use-effect\n  ([f]\n   (react/useEffect f))\n  ([f deps]\n   (react/useEffect f (to-array deps))))\n\n(defn use-atom-fn\n  [a getter-fn setter-fn]\n  (let [[val set-val] (use-state (getter-fn @a))]\n\n    (use-effect\n     (fn []\n       (let [id (str (random-uuid))]\n         (add-watch a id (fn [_ _ prev-state next-state]\n                           (let [prev-value (getter-fn prev-state)\n                                 next-value (getter-fn next-state)]\n                             (when-not (= prev-value next-value)\n                               (set-val next-value)))))\n         #(remove-watch a id)))\n     [])\n\n    [val #(swap! a setter-fn %)]))\n\n(defn use-atom\n  \"(use-atom my-atom)\"\n  [a]\n  (use-atom-fn a identity (fn [_ v] v)))\n\n(defn use-atom-path\n  \"(use-atom my-atom [:path :to :data])\"\n  [a path]\n  (use-atom-fn a #(get-in % path) #(assoc-in %1 path %2)))\n"]}
{"version":3,"sources":["cljspad/logging.cljs"],"mappings":";AAGA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AACP,AAACC;;AAEH,AAAA,AAAAJ,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAASC,AACP,AAACF;;AAEH,AAAA,AAAMG;AAAN,AACE,AAAA,AAAMC;;AAEN,AAACC,AACA;AAAOC;AAAP,AACE,AAACC,AAAWL,AAAOI;;;AADdA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;;AAGR,AAACE,AACA;AAAOF;AAAP,AACE,AAACC,AAAWR,AAAOO;;;AADdA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA","names":["js/cljspad","js/cljspad.logging","js/cljspad.logging.stderr","cljspad.logging/stderr","cljs.core.async.chan","js/cljspad.logging.stdout","cljspad.logging/stdout","cljspad.logging/init!","cljs.core/*print-newline*","cljs.core/set-print-fn!","args","cljs.core.async.put_BANG_","cljs.core/set-print-err-fn!"],"sourcesContent":["(ns cljspad.logging\n  (:require [cljs.core.async :as async]))\n\n(defonce stderr\n  (async/chan))\n\n(defonce stdout\n  (async/chan))\n\n(defn init! []\n  (set! *print-newline* false)\n\n  (set-print-fn!\n   (fn [& args]\n     (async/put! stdout args)))\n\n  (set-print-err-fn!\n   (fn [& args]\n     (async/put! stderr args))))"]}
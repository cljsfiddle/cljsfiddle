{"version":3,"sources":["rehook/dom/util.cljc"],"mappings":";AAGA,AAAA,AAAMA,AACHC,AAAKC;AADR,AAEE,AAAAC,AAA6BD;AAA7BC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAcK;AAAd,AAAAD,AAAAJ,AAAA,AAAwBM;AAAxB,AACE,AAAAC,AAAQT;AAARS,AAAA,AACE,AAAAC,AAAIF;AAAJ,AAAA,AAAAE;AAAAA;;AAAO,AAAA,AAAKV;;AACZ,AAAAS,AAAA,AAAA,AAAAE,AAACC;AAAD,AAAa,AAAAF,AAAIF;AAAJ,AAAA,AAAAE;AAAAA;;AAAAC;;AAFfF;AAAA,AAAA,AAIE,AAAAC,AAAI,AAAA,AAAYV;AAAhB,AAAA,AAAAU;AAAAA;;AAAsBH;;;AACtB,AAAAE,AAAA,AAAA,AAAAI,AAACD;AAAD,AAAoB,AAAI,AAAAE,AAAAD;AAAA,AAAA,AAAAC;AAAOP;;AAAPO;;;AACF,AAAAD,AAAA,AAAWN;;AACX,AAAAG,AAAAG;AAAA,AAAA,AAAAH;AAAAA;;AAAMH;;;;;AAP9BE;;;AASJ,AAAKM,AACH,AAACC,AACA,AAAKC;AAAL,AACE,AAAMC,AAAK,AAACC,AAAKF;AAAjB,AACE,AAAI,AAAI,AAAA,AAACG,AAAcF,AAAU,AAAA,AAACE,AAAcF;AAC9C,AAAAG,AAA2B,AAAA,AAACU,AAAUb;AAAtCI,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAAA,AAAA,AAAAI,AAAAJ;AAAAE,AAAON;AAAPI,AAAcQ;AAAdH,AACgB,AAAA,AAACI,AAAUb;AAD3B,AAAAU,AAAAD,AAAA,AAAA,AACOT;AADP,AAAAU,AAAAD,AAAA,AAAA,AACYnB;AADZqB,AAEuB,AAAA,AAAIrB,AACDA,AAAGsB,AACJ,AAAME,AAAe,AAAA,AAAAC,AAACC;AAAD,AAAM,AAAAD,AAAA,AAACF;AAAkBD;AAA9C,AAAA,AACG,AAACL,AAAM,AAACS,AAAIC,AAAOH,AAAiB,AAACE,AAAIT,AAAMO;;AAL3E,AAAAJ,AAAAC,AAAA,AAAA,AAEOrB;AAFP,AAAAoB,AAAAC,AAAA,AAAA,AAEUC;AAFV,AAAA,AAMGZ,AAAK,AAAAkB,AAAA;AAAAA,AAAA,AAAAA,AACE,AAACC,AAAUP,AAAa,AAAAM,AAAA,AAACE,AAAiB,AAAA,AAACC,AAAaT;AAD1D,AAAA,AAEEtB;AAAG,AAAA4B,AAAA,AAACE,AAAU9B;;AAFhB4B;;;;AAPV,AAAA,AAUGlB","names":["rehook.dom.util/merge-arguments","args","extra-args","map__20813","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","className","id","G__20815","or__4126__auto__","p1__20811#","cljs.core.update","p1__20812#","and__4115__auto__","rehook.dom.util/keyword->elem","cljs.core/memoize","kw","elem","cljs.core/name","clojure.string/includes?","vec__20820","seq__20821","cljs.core/seq","first__20822","cljs.core/first","cljs.core/next","vec__20823","cljs.core.nth","vec__20826","class-names","clojure.string.split","classes-and-id","p1__20819#","cljs.core.map","cljs.core/second","G__20831","cljs.core/not-empty","cljs.core.assoc","clojure.string.join"],"sourcesContent":["(ns rehook.dom.util\n  (:require [clojure.string :as str]))\n\n(defn merge-arguments\n  [args extra-args]\n  (let [{:keys [className id]} extra-args]\n    (cond-> args\n      (or id (:id args))\n      (update :id #(or id %))\n\n      (or (:className args) className)\n      (update :className #(if (and % className)\n                            (str % \" \" className)\n                            (or % className))))))\n\n(def keyword->elem\n  (memoize\n   (fn [kw]\n     (let [elem (name kw)]\n       (if (or (str/includes? elem \".\") (str/includes? elem \"#\"))\n         (let [[elem & class-names] (str/split elem #\"\\.\")\n               [elem id] (str/split elem #\"#\")\n               [id class-names] (if id\n                                  [id class-names]\n                                  (let [classes-and-id (map #(str/split % #\"#\") class-names)]\n                                    [(first (map second classes-and-id)) (map first classes-and-id)]))]\n           [elem (cond-> {}\n                   (not-empty class-names) (assoc :className (str/join \" \" class-names))\n                   id (assoc :id id))])\n         [elem {}])))))"]}
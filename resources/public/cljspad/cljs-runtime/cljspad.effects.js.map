{"version":3,"sources":["cljspad/effects.cljs"],"mappings":"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","names":["cljspad.effects/manifest","db","_","vec__45138","cljs.core.nth","version","rehook.core/use-atom-path","rehook.core.use_effect","js/fetch","p1__45130#","p1__45131#","cljs.tools.reader.edn.read_string","p1__45132#","cljs.core.swap_BANG_","cljs.core/assoc-in","p1__45133#","js/console.log","cljs.core/constantly","cljspad.effects/highlight","js/module$node_modules$highlight_DOT_js$lib$index.initHighlightingOnLoad","js/module$node_modules$marked$lib$marked","code","lang","clojure.string/blank?","js/module$node_modules$highlight_DOT_js$lib$index.highlight","cljspad.effects/logging","cljspad.logging/init!","cljs.core/enable-console-print!","cljspad.effects/load-gist","compiler-state","id","resp","cljs.core.prn","source","cljs.core/assoc","cljspad.env/eval-form","err","cljspad.effects/gist","vec__45150","vec__45153","gist-id","sandbox-ready?","and__4115__auto__","cljspad.effects/monaco-ref","monaco","ref","js/module$node_modules$react$index.useRef","cljs.core/reset!","cljspad.effects/default-embed-tab","vec__45165","vec__45168","selected-tab","embed?","cljs.core.keyword","or__4126__auto__","ctx__45100__auto__","$__45101__auto__","map__45136","cljs.core.dissoc","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","$45134","props__45102__auto__","cljs.core.vary_meta","rehook.dom/rehook-meta","rehook.dom/eval-hiccup","$45141","$45143","map__45148","$45145","map__45159","$45157","map__45163","$45161"],"sourcesContent":["(ns cljspad.effects\n  \"Global effects\"\n  (:require [rehook.dom :refer-macros [defui]]\n            [rehook.core :as rehook]\n            [clojure.string :as str]\n            [cljs.tools.reader.edn :as edn]\n            [cljspad.logging :as log]\n            [cljspad.env :as env]\n            [\"highlight.js\" :as hljs]\n            [\"marked\" :as marked]\n            [\"react\" :as react]))\n\n(defui manifest [{:keys [db]} _]\n  (let [[version _] (rehook/use-atom-path db [:version])]\n    (rehook/use-effect\n     (fn []\n       (-> (js/fetch (str \"/sandbox/\" version \"/cljspad.manifest.edn\"))\n           (.then #(.text %))\n           (.then #(edn/read-string %))\n           (.then #(swap! db assoc-in [:manifest version] %))\n           (.catch #(js/console.log \"Could not load manifest\" %)))\n       (constantly nil))\n     [version])))\n\n(defui highlight [_ _]\n  (rehook/use-effect\n   (fn []\n     (hljs/initHighlightingOnLoad)\n     (.setOptions marked #js {:highlight (fn [code lang]\n                                           (when-not (str/blank? lang)\n                                             (aget (hljs/highlight lang code) \"value\")))})\n     (constantly nil))\n   []))\n\n(defui logging [_ _]\n  (rehook/use-effect\n   (fn []\n     (log/init!)\n     (fn []\n       (enable-console-print!)))\n   []))\n\n(defn load-gist\n  [db compiler-state id]\n  (-> (js/fetch (str \"/api/v1/gist/\" id))\n      (.then (fn [resp]\n               (if (aget resp \"ok\")\n                 (.text resp)\n                 (prn (str \"Failed to load gist \" id \". Server responded with \" (aget resp \"status\"))))))\n      (.then (fn [source]\n               (when source\n                 (swap! db assoc :source source)\n                 (env/eval-form compiler-state source))))\n      (.catch (fn [err]\n                (prn err)))))\n\n(defui gist [{:keys [db compiler-state]} _]\n  (let [[gist-id _] (rehook/use-atom-path db [:opts :gist_id])\n        [sandbox-ready? _] (rehook/use-atom-path db [:sandbox/ready?])]\n    (rehook/use-effect\n     (fn []\n       (when (and gist-id sandbox-ready?)\n         (load-gist db compiler-state gist-id))\n       (constantly nil))\n     [(str gist-id) sandbox-ready?])))\n\n;; monaco has to be global to support auxiliary functionality (copy to clipboard, eval gist on load)\n(defui monaco-ref\n  [{:keys [monaco]} _]\n  (let [ref (react/useRef)]\n    (rehook/use-effect\n     (fn []\n       (reset! monaco ref)\n       (fn []\n         (reset! monaco nil))))))\n\n(defui default-embed-tab\n  [{:keys [db]} _]\n  (let [[selected-tab _] (rehook/use-atom-path db [:opts :selected_tab])\n        [embed? _] (rehook/use-atom-path db [:opts :embed])]\n    (rehook/use-effect\n     (fn []\n       (when embed?\n         (swap! db assoc :selected-tab (keyword (or selected-tab \"editor\"))))\n\n       (constantly nil))\n     [embed? (str selected-tab)])))"]}
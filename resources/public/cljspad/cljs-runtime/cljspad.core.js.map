{"version":3,"sources":["cljspad/core.cljs"],"mappings":"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","names":["js/goog.define","cljspad.core/version","cljspad.core/initial-state","cljspad.core/system","opts","compiler-state","cljspad.env/state","db","cljs.core.atom","cljs.core.assoc","cljspad.env/init","cljs.core.swap_BANG_","cljs.core/assoc","cljspad.logging/stdout","cljspad.logging/stderr","cljspad.core/loading","_","cljspad.core/left-pane","cljspad.editor/editor","cljspad.repl/repl","cljspad.core/right-pane","cljspad.right-pane/right-pane-tabs","cljspad.right-pane/readme","cljspad.right-pane/libraries","cljspad.right-pane/export","cljspad.right-pane/sandbox","cljspad.core/app","cljspad.core/embed","cljspad.embed/tabs","cljspad.embed/editor","cljspad.embed/repl","cljspad.core/dominant-component","vec__45692","cljs.core.nth","vec__45695","vec__45698","loading?","rehook.core/use-atom-path","error","embed?","cljspad.core/root-component","cljspad.effects/default-embed-tab","cljspad.effects/monaco-ref","cljspad.effects/gist","cljspad.effects/highlight","cljspad.effects/logging","cljspad.effects/manifest","js/cljspad","js/cljspad.core","js/cljspad.core.app-state","cljspad.core/app-state","cljspad.core/render","js/module$node_modules$react_dom$index.render","cljs.core/deref","rehook.dom.browser.bootstrap","cljs.core/identity","cljs.core/clj->js","js/document.getElementById","cljspad.core/main","cljs.core.js__GT_clj","sys","cljs.core/reset!","ctx__45100__auto__","$__45101__auto__","cljs.core.dissoc","$45641","props__45102__auto__","cljs.core.vary_meta","cljs.core.get","rehook.dom/rehook-meta","cljs.core.apply","rehook.dom/eval-hiccup","$45644","$45650","$45659","$45665","map__45679","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","$45673","$45701"],"sourcesContent":["(ns cljspad.core\n  (:require [rehook.core :as rehook]\n            [rehook.dom :refer-macros [defui]]\n            [rehook.dom.browser :as dom.browser]\n            [cljspad.effects :as effects]\n            [cljspad.env :as env]\n            [cljspad.repl :as repl]\n            [cljspad.editor :as editor]\n            [cljspad.logging :as log]\n            [cljspad.right-pane :as right-pane]\n            [cljspad.embed :as embed]\n            [\"react-dom\" :as react-dom]))\n\n(goog-define version \"dev\")\n\n(def initial-state\n  {:loading?     true\n   :error?       false\n   :version      version\n   :manifest     {}\n   :source       \"\"\n   :selected-tab :readme})\n\n(defn system [opts]\n  (let [compiler-state (env/state)\n        db             (atom (assoc initial-state :opts opts))]\n    ;; TODO: move this effect into cljspad.effects\n    (env/init compiler-state version #(swap! db assoc :loading? false))\n    {:compiler-state compiler-state\n     :console        {:stdout log/stdout\n                      :stderr log/stderr}\n     :monaco         (atom nil)\n     :db             db}))\n\n(defui loading [_ _]\n  ;; TODO: better loading state\n  [:div \"Loading...\"])\n\n(defui left-pane [_ _]\n  [:div.cljspad-left-pane\n   [:div {:style {:display       \"flex\"\n                  :flexDirection \"column\"}}\n    [editor/editor {:height \"calc(100vH - 250px)\"}]\n    [repl/repl {:height \"200px\"}]]])\n\n(defui right-pane [_ _]\n  [:div.cljspad-right-pane\n   [right-pane/right-pane-tabs]\n   [right-pane/readme]\n   [right-pane/libraries]\n   [right-pane/export]\n   [right-pane/sandbox]])\n\n(defui app [_ _]\n  [:div.cljspad-container\n   [left-pane]\n   [right-pane]])\n\n(defui embed [_ _]\n  [:<>\n   [embed/tabs]\n   [embed/editor]\n   [embed/repl]\n   [right-pane/sandbox]])\n\n(defui dominant-component [{:keys [db]} _]\n  (let [[loading? _] (rehook/use-atom-path db [:loading?])\n        [error _] (rehook/use-atom-path db [:error])\n        [embed? _] (rehook/use-atom-path db [:opts :embed])]\n    (cond\n      loading? [loading]\n      error [:div (str error)]\n      embed? [embed]\n      :else [app])))\n\n(defui root-component [_ _]\n  [:<>\n   [effects/default-embed-tab]\n   [effects/monaco-ref]\n   [effects/gist]\n   [effects/highlight]\n   [effects/logging]\n   [effects/manifest]\n   [dominant-component]])\n\n(defonce app-state\n  (atom nil))\n\n(defn ^:dev/after-load render []\n  (react-dom/render\n   (dom.browser/bootstrap @app-state identity clj->js root-component)\n   (js/document.getElementById \"app\")))\n\n(defn ^:export main [opts]\n  (let [opts (js->clj opts :keywordize-keys true)\n        sys  (system opts)]\n    (reset! app-state sys)\n    (render)))"]}
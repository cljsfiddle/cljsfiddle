{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$c_like.js",
"lineCount":8,
"mappings":"AAAAA,cAAA,CAAe,yDAAf,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAkPtHD,MAAA,CAAOC,OAAP,CAjOAC,QAAc,CAACC,IAAD,CAAO,CAWnB,IAAIC,oBAAsB,CACxBC,UAAW,SADa,CAExBC,MAAO,oBAFiB,CAA1B,CAQIC,QAAU,CACZF,UAAW,QADC,CAEZG,SAAU,CACR,CACEF,MAAO,aADT,CACwBG,IAAK,GAD7B,CAEEC,QAAS,KAFX,CAGEC,SAAU,CAACR,IAAD,CAAMS,gBAAN,CAHZ,CADQ,CAMR,CACEN,MAAO,qEADT,CACsDG,IAAK,GAD3D,CAEEC,QAAS,GAFX,CANQ,CAURP,IAAA,CAAKU,iBAAL,CAAuB,CACrBP,MAAO,kCADc,CAErBG,IAAK,qBAFgB,CAAvB,CAVQ,CAFE,CARd;AA2BIK,QAAU,CACZT,UAAW,QADC,CAEZG,SAAU,CACR,CAAEF,MAAO,eAAT,CADQ,CAER,CAAEA,MAAO,iEAAT,CAFQ,CAGR,CAAEA,MAAO,qFAAT,CAHQ,CAFE,CAOZS,UAAW,CAPC,CA3Bd,CAqCIC,aAAqB,CACvBX,UAAW,MADY,CAEvBC,MAAO,cAFgB,CAEAG,IAAK,GAFL,CAGvBQ,SAAU,CACR,eACE,wFAFM,CAHa,CAQvBN,SAAU,CACR,CACEL,MAAO,MADT,CACiBS,UAAW,CAD5B,CADQ,CAIRZ,IAAA,CAAKe,OAAL,CAAaX,OAAb,CAAsB,CAACF,UAAW,aAAZ,CAAtB,CAJQ;AAKR,CACEA,UAAW,aADb,CAEEC,MAAO,OAFT,CAEkBG,IAAK,GAFvB,CAGEC,QAAS,KAHX,CALQ,CAURP,IAVQ,CAUHgB,mBAVG,CAWRhB,IAXQ,CAWHiB,oBAXG,CARa,CArCzB,CA4DIC,WAAa,CACfhB,UAAW,OADI,CAEfC,MAvEO,sBAuEPA,CAAgCH,IAAhCG,CAAqCgB,QAFtB,CAGfP,UAAW,CAHI,CA5DjB,CAkEIQ,eA3EK,sBA2ELA,CAA0CpB,IAA1CoB,CAA+CD,QAA/CC,CAA0D,SAlE9D,CAoEIC,aAAe,CACjBC,QAAS,w0BADQ;AAajBC,SAAU,81BAbO;AAsBjBC,QAAS,yBAtBQ,CApEnB,CA6FIC,oBAAsB,CACxBxB,mBADwB,CAExBD,IAFwB,CAEnBgB,mBAFmB,CAGxBhB,IAHwB,CAGnBiB,oBAHmB,CAIxBN,OAJwB,CAKxBP,OALwB,CA7F1B,CAqGIsB,mBAAqB,CAIvBrB,SAAU,CACR,CAACF,MAAO,GAAR,CAAaG,IAAK,GAAlB,CADQ,CAER,CAACH,MAAO,IAAR,CAAcG,IAAK,IAAnB,CAFQ,CAGR,CAACqB,cAAe,uBAAhB,CAAyCrB,IAAK,GAA9C,CAHQ,CAJa,CASvBQ,SAAUO,YATa,CAUvBb,SAAUiB,mBAAA,CAAoBG,MAApB,CAA2B,CACnC,CACEzB,MAAO,IADT,CACeG,IAAK,IADpB,CAEEQ,SAAUO,YAFZ,CAGEb,SAAUiB,mBAAA,CAAoBG,MAApB,CAA2B,CAAC,MAAD,CAA3B,CAHZ,CAIEhB,UAAW,CAJb,CADmC,CAA3B,CAVa,CAkBvBA,UAAW,CAlBY,CA0EzB,OAAO,CACLiB,QAAS,+BAAA,CAAA,KAAA,CAAA,GAAA,CADJ,CAELf,SAAUO,YAFL;AAKLS,kBAAmB,CAAA,CALd,CAMLvB,QAAS,OANJ,CAOLC,SAAU,EAAA,CAAGoB,MAAH,CACRF,kBADQ,CA5DeK,CACzB7B,UAAW,UADc6B,CAEzB5B,MAAO,wFAAPA,CAAiDiB,cAFxBW,CAGzBC,YAAa,CAAA,CAHYD,CAGNzB,IAAK,OAHCyB,CAIzBE,WAAY,CAAA,CAJaF,CAKzBjB,SAAUO,YALeU,CAMzBxB,QAAS,eANgBwB,CAOzBvB,SAAU,CAER,CACEL,MA3IiB+B,oBA0InB,CAEEpB,SAAUO,YAFZ,CAGET,UAAW,CAHb,CAFQ,CAOR,CACET,MAAOiB,cADT,CACyBY,YAAa,CAAA,CADtC,CAEExB,SAAU,CAACU,UAAD,CAFZ,CAGEN,UAAW,CAHb,CAPQ,CAYR,CACEV,UAAW,QADb,CAEEC,MAAO,IAFT,CAEeG,IAAK,IAFpB,CAGEQ,SAAUO,YAHZ;AAIET,UAAW,CAJb,CAKEJ,SAAU,CACRR,IADQ,CACHgB,mBADG,CAERhB,IAFQ,CAEHiB,oBAFG,CAGRb,OAHQ,CAIRO,OAJQ,CAKRV,mBALQ,CAOR,CACEE,MAAO,IADT,CACeG,IAAK,IADpB,CAEEQ,SAAUO,YAFZ,CAGET,UAAW,CAHb,CAIEJ,SAAU,CACR,MADQ,CAERR,IAFQ,CAEHgB,mBAFG,CAGRhB,IAHQ,CAGHiB,oBAHG,CAIRb,OAJQ,CAKRO,OALQ,CAMRV,mBANQ,CAJZ,CAPQ,CALZ,CAZQ,CAuCRA,mBAvCQ,CAwCRD,IAxCQ,CAwCHgB,mBAxCG,CAyCRhB,IAzCQ,CAyCHiB,oBAzCG,CA0CRJ,YA1CQ,CAPekB,CA4Df,CAGRN,mBAHQ,CAIR,CACAZ,YADA,CAEA,CACEV,MAAO,yKADT;AACiLG,IAAK,MADtL,CAEEQ,SAAUO,YAFZ,CAGEb,SAAU,CAAC,MAAD,CAASP,mBAAT,CAHZ,CAFA,CAOA,CACEE,MAAOH,IAAPG,CAAYgB,QAAZhB,CAAuB,IADzB,CAEEW,SAAUO,YAFZ,CAPA,CAWA,CACEnB,UAAW,OADb,CAEEyB,cAAe,cAFjB,CAEiCrB,IAAK,OAFtC,CAGEE,SAAU,CACR,CAACL,MAAO,GAAR,CAAaG,IAAK,GAAlB,CAAuBE,SAAU,CAAC,MAAD,CAAjC,CADQ,CAERR,IAFQ,CAEHkB,UAFG,CAHZ,CAXA,CAJQ,CAPL,CA+BLpB,QAAS,CACPqC,aAActB,YADP,CAEPuB,QAAShC,OAFF,CAGPU,SAAUO,YAHH,CA/BJ,CA1LY,CAjBiG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/c-like.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$c_like\"] = function(global,require,module,exports) {\n/*\nLanguage: C-like foundation grammar for C/C++ grammars\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nContributors: Evgeny Stepanischev <imbolk@gmail.com>, Zaven Muradyan <megalivoithos@gmail.com>, Roel Deckers <admin@codingcat.nl>, Sam Wu <samsam2310@gmail.com>, Jordi Petit <jordi.petit@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, Google Inc. (David Benjamin) <davidben@google.com>\nCategory: common, system\n*/\n\n/* In the future the intention is to split out the C/C++ grammars distinctly\nsince they are separate languages.  They will likely share a common foundation\nthough, and this file sets the groundwork for that - so that we get the breaking\nchange in v10 and don't have to change the requirements again later.\n\nSee: https://github.com/highlightjs/highlight.js/issues/2146\n*/\n\n/** @type LanguageFn */\nfunction cLike(hljs) {\n  function optional(s) {\n    return '(?:' + s + ')?';\n  }\n  var DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  var NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  var TEMPLATE_ARGUMENT_RE = '<.*?>';\n  var FUNCTION_TYPE_RE = '(' +\n    DECLTYPE_AUTO_RE + '|' +\n    optional(NAMESPACE_RE) +'[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) +\n  ')';\n  var CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  var CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  var STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"', end: '\"',\n        illegal: '\\\\n',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\", end: '\\'',\n        illegal: '.'\n      },\n      hljs.END_SAME_AS_BEGIN({\n        begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n        end: /\\)([^()\\\\ ]{0,16})\"/,\n      })\n    ]\n  };\n\n  var NUMBERS = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(0b[01\\']+)' },\n      { begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)' },\n      { begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)' }\n    ],\n    relevance: 0\n  };\n\n  var PREPROCESSOR =       {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/, end: /$/,\n    keywords: {\n      'meta-keyword':\n        'if else elif endif define undef warning error line ' +\n        'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/, relevance: 0\n      },\n      hljs.inherit(STRINGS, {className: 'meta-string'}),\n      {\n        className: 'meta-string',\n        begin: /<.*?>/, end: /$/,\n        illegal: '\\\\n',\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  var TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n\n  var FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  var CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' +\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\n      'unsigned long volatile static protected bool template mutable if public friend ' +\n      'do goto auto void enum else break extern using asm case typeid wchar_t ' +\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\n      'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' +\n      'concept co_await co_return co_yield requires ' +\n      'noexcept static_assert thread_local restrict final override ' +\n      'atomic_bool atomic_char atomic_schar ' +\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\n      'atomic_ullong new throw return ' +\n      'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\n      'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set ' +\n      'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos ' +\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\n      'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary',\n    literal: 'true false nullptr NULL'\n  };\n\n  var EXPRESSION_CONTAINS = [\n    CPP_PRIMITIVE_TYPES,\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  var EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [\n      {begin: /=/, end: /;/},\n      {begin: /\\(/, end: /\\)/},\n      {beginKeywords: 'new throw return else', end: /;/}\n    ],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([\n      {\n        begin: /\\(/, end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat(['self']),\n        relevance: 0\n      }\n    ]),\n    relevance: 0\n  };\n\n  var FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true, end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>]/,\n    contains: [\n\n      { // to prevent it from being confused as the function title\n        begin: DECLTYPE_AUTO_RE,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n      },\n      {\n        begin: FUNCTION_TITLE, returnBegin: true,\n        contains: [TITLE_MODE],\n        relevance: 0\n      },\n      {\n        className: 'params',\n        begin: /\\(/, end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: [\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          STRINGS,\n          NUMBERS,\n          CPP_PRIMITIVE_TYPES,\n          // Count matching parentheses.\n          {\n            begin: /\\(/, end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              'self',\n              hljs.C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES\n            ]\n          }\n        ]\n      },\n      CPP_PRIMITIVE_TYPES,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      PREPROCESSOR\n    ]\n  };\n\n  return {\n    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\n    keywords: CPP_KEYWORDS,\n    // the base c-like language will NEVER be auto-detected, rather the\n    // derivitives: c, c++, arduino turn auto-detect back on for themselves\n    disableAutodetect: true,\n    illegal: '</',\n    contains: [].concat(\n      EXPRESSION_CONTEXT,\n      FUNCTION_DECLARATION,\n      EXPRESSION_CONTAINS,\n      [\n      PREPROCESSOR,\n      { // containers: ie, `vector <int> rooms (9);`\n        begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<', end: '>',\n        keywords: CPP_KEYWORDS,\n        contains: ['self', CPP_PRIMITIVE_TYPES]\n      },\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: CPP_KEYWORDS\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class struct', end: /[{;:]/,\n        contains: [\n          {begin: /</, end: />/, contains: ['self']}, // skip generic stuff\n          hljs.TITLE_MODE\n        ]\n      }\n    ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n}\n\nmodule.exports = cLike;\n\n};"],
"names":["shadow$provide","global","require","module","exports","cLike","hljs","CPP_PRIMITIVE_TYPES","className","begin","STRINGS","variants","end","illegal","contains","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","NUMBERS","relevance","PREPROCESSOR","keywords","inherit","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","TITLE_MODE","IDENT_RE","FUNCTION_TITLE","CPP_KEYWORDS","keyword","built_in","literal","EXPRESSION_CONTAINS","EXPRESSION_CONTEXT","beginKeywords","concat","aliases","disableAutodetect","FUNCTION_DECLARATION","returnBegin","excludeEnd","DECLTYPE_AUTO_RE","preprocessor","strings"]
}

{"version":3,"sources":["cljspad/right_pane.cljs"],"mappings":"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","names":["cljspad.right-pane/library-meta","_","library","vec__45224","cljs.core.nth","expanded","set-expanded","rehook.core/use-state","G__45227","cljs.core/not","cljs.core/name","temp__5733__auto__","coord","cljs.core.pr_str","temp__5735__auto__","website","render-fn","requires","cljs.core/seq","iter__4529__auto__","s__45231","cljs.core/LazySeq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__45233","cljs.core/chunk-buffer","i__45232","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__45230","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","r","examples","s__45237","b__45239","i__45238","iter__45236","example","href","cljspad.right-pane/manifest-libraries","manifest","s__45257","b__45259","i__45258","iter__45256","cljs.core.sort_by","cljspad.right-pane/manifest","db","vec__45274","vec__45277","version","rehook.core/use-atom-path","cljspad.right-pane/readme","vec__45294","selected-tab","ref","js/module$node_modules$react$index.useRef","rehook.core.use_effect","cljs.core._EQ_","js/fetch","p1__45283#","p1__45284#","js/module$node_modules$marked$lib$marked","cljs.core/constantly","cljspad.right-pane/sandbox","ctx__45100__auto__","$__45101__auto__","cljs.core.dissoc","$45220","props__45102__auto__","map__45222","cljs.core.vary_meta","cljs.core.get","rehook.dom/rehook-meta","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","rehook.dom/eval-hiccup","$45249","map__45251","map__45268","$45263","map__45288","$45285","map__45307","$45303","map__45324","$45322","map__45331","$45329","$45336","map__45340","$45338","map__45353","$45351","map__45392","$45390","vec__45315","set-selected-tab","cljs.core.swap_BANG_","cljs.core/assoc","js/__cljspad_sandbox","cljs.core.ex_info","cljspad.right-pane/right-pane-tabs","vec__45326","cljspad.right-pane/libraries","vec__45333","cljspad.right-pane/highlight","props","js/module$node_modules$highlight_DOT_js$lib$index.highlightBlock","rehook.util/children","cljspad.right-pane/copy-to-clipboard","monaco","vec__45342","vec__45345","rehook.core/use-atom","initial-copy-text","copy-text","set-copy-text","f","js/setTimeout","js/clearTimeout","cljspad.editor/copy-to-clipboard","cljspad.right-pane/deps-edn","compiler-state","vec__45355","vec__45358","vec__45361","vec__45364","cljs-version","nses","p1__45349#","rehook.core/use-atom-fn","cljs.core/set","cljs.core/keys","libraries","clj-deps","cljs.core.filter","p__45367","map__45368","require","cljs.core/some","p__45372","vec__45373","seq__45374","first__45375","cljs.core/next","cljs.core/contains?","p1__45350#","cljs.core.keep","sb__4667__auto__","goog.string/StringBuffer","*print-newline*-orig-val__45376","cljs.core/*print-newline*","*print-fn*-orig-val__45377","cljs.core/*print-fn*","*print-newline*-temp-val__45378","*print-fn*-temp-val__45379","x__4668__auto__","cljs.pprint.pprint","cljs.core.into","cljs.core.map","p__45382","vec__45383","dep","cljs.core.symbol","cljspad.right-pane/export","vec__45396","vec__45399","vec__45402","p1__45388#","sandbox-version","set-sandbox-version","G__45407","*print-newline*-orig-val__45410","*print-fn*-orig-val__45411","*print-newline*-temp-val__45412","*print-fn*-temp-val__45413","cljs.core/chunk-first"],"sourcesContent":["(ns cljspad.right-pane\n  (:require [cljspad.editor :as editor]\n            [rehook.core :as rehook]\n            [rehook.dom :refer-macros [defui]]\n            [rehook.util :as util]\n            [cljs.pprint :as pprint]\n            [\"highlight.js\" :as hljs]\n            [\"marked\" :as marked]\n            [\"react\" :as react]))\n\n(defui library-meta\n  [_ {:keys [library]}]\n  (let [[expanded set-expanded] (rehook/use-state false)]\n    [:div {:style {:marginBottom \"5px\"}}\n\n     [:div.button\n      {:onClick #(set-expanded (not expanded))\n       :style   {:width \"300px\"}}\n      [:span (:name library) \" (\" (-> library :type name) \")\"]\n      [:span {:style     {:float \"right\"}\n              :className (if expanded\n                           \"cljspad-caret-down-icon\"\n                           \"cljspad-caret-right-icon\")}]]\n\n     (when expanded\n       [:div {:style {:marginTop     \"5px\"\n                      :marginBottom  \"5px\"\n                      :paddingLeft   \"5px\"\n                      :paddingRight  \"5px\"\n                      :paddingTop    \"10px\"\n                      :paddingBottom \"10px\"\n                      :border        \"1px solid #ccc\"\n                      :borderRadius  \"4px\"}}\n        [:div (if-let [coord (:coord library)]\n                [:code.cljspad-code (pr-str coord)]\n                [:code.cljspad-code (:name library)])]\n\n        [:table {:style {:marginTop    \"10px\"\n                         :marginBottom \"10px\"}}\n         [:tbody\n          [:tr\n           [:td [:strong \"About\"]]\n           [:td (:doc library)]]\n          (when-let [website (:url library)]\n            [:tr\n             [:td [:strong \"Website\"]]\n             [:td [:a {:href website} website]]])\n          (when-let [render-fn (:render-fn library)]\n            [:tr\n             [:td [:strong \"Render fn\"]]\n             [:td [:code.cljspad-code (str render-fn)]]])\n          (when-let [requires (seq (:require library))]\n            [:tr\n             [:td [:strong \"Namespaces\"]]\n             [:td (for [r requires]\n                    [:div [:code.cljspad-code (pr-str r)]])]])]]\n\n        (when-let [examples (seq (:examples library))]\n          [:<>\n           [:h3 \"Examples\"]\n           [:table {:style {:marginTop \"10px\"\n                            :marginBottom \"10px\"}}\n            [:tbody\n             (for [example examples]\n               (let [href (str \"https://cljspad.dev/gist/\" (:gist-id example))]\n                 [:tr {:key (str \"loaded-library-\" (:name library) \"-example-\" (:name example))}\n                  [:td (:name example)]\n                  [:td [:a {:href href} href]]]))]]])])]))\n\n(defui manifest-libraries\n  [_ {:keys [manifest]}]\n  [:div\n   (for [library (sort-by :name (:sandbox/libraries manifest))]\n     [:div {:key (str \"loaded-library-\" (:name library))}\n      [library-meta {:library library :available? false}]])])\n\n(defui manifest [{:keys [db]} _]\n  (let [[version _] (rehook/use-atom-path db [:version])\n        [manifest _] (rehook/use-atom-path db [:manifest version])]\n    [:div\n     [:h1 \"Libraries\"]\n     [manifest-libraries {:manifest manifest}]]))\n\n(defui readme [{:keys [db]} _]\n  (let [[selected-tab _] (rehook/use-atom-path db [:selected-tab])\n        ref (react/useRef)]\n\n    (rehook/use-effect\n     (fn []\n       (when (= selected-tab :readme)\n         (-> (js/fetch \"https://raw.githubusercontent.com/cljspad/cljspad/master/README.md\")\n             (.then #(.text %))\n             (.then #(aset (aget ref \"current\") \"innerHTML\" (marked %)))))\n       (constantly nil))\n     [])\n\n    [:div.cljspad-readme\n     {:ref   ref\n      :style (when-not (= selected-tab :readme)\n               {:display \"none\"})}]))\n\n(defui sandbox [{:keys [db]} _]\n  (let [[selected-tab set-selected-tab] (rehook/use-atom-path db [:selected-tab])\n        ref (react/useRef)]\n\n    (rehook/use-effect\n     (fn []\n       (swap! db assoc :sandbox/ready? true)\n       (set! js/__cljspad_sandbox\n             (fn []\n               (set-selected-tab :sandbox)\n               (aget ref \"current\")))\n       (fn []\n         (swap! db assoc :sandbox/ready? false)\n         (set! js/__cljspad_sandbox\n               (fn []\n                 (throw (ex-info \"Cannot render, sandbox has been unmounted from DOM.\" {})))))))\n\n    [:div.cljspad-sandbox#cljspad--sandbox\n     {:ref   ref\n      :style (when-not (= selected-tab :sandbox)\n               {:display \"none\"})}]))\n\n(defui right-pane-tabs [{:keys [db]} _]\n  (let [[selected-tab set-selected-tab] (rehook/use-atom-path db [:selected-tab])]\n    [:div.toolbar\n     [:div.button\n      {:className (when (= selected-tab :readme) \"active\")\n       :onClick   #(set-selected-tab :readme)}\n      \"README.md\"]\n     [:div.button\n      {:className (when (= selected-tab :library) \"active\")\n       :onClick   #(set-selected-tab :library)}\n      \"Libraries\"]\n     [:div.button\n      {:className (when (= selected-tab :export) \"active\")\n       :onClick   #(set-selected-tab :export)}\n      \"Export\"]\n     [:div.button\n      {:className (when (= selected-tab :sandbox) \"active\")\n       :onClick   #(set-selected-tab :sandbox)} \"Output\"]\n     [:a.button {:style {:marginLeft \"auto\"}\n                 :href  \"https://github.com/cljspad/cljspad\"}\n      [:span.cljspad-github-icon]]]))\n\n(defui libraries [{:keys [db]} _]\n  (let [[selected-tab _] (rehook/use-atom-path db [:selected-tab])]\n    [:div.cljspad-library\n     {:style (when-not (= selected-tab :library)\n               {:display \"none\"})}\n     [manifest]]))\n\n(defui highlight [_ props]\n  (let [ref (react/useRef)]\n    (rehook/use-effect\n     (fn []\n       (hljs/highlightBlock (aget ref \"current\"))\n       (constantly nil)))\n\n    [:pre\n     [:code {:ref ref :className \"language-clojure\"}\n      (util/children props)]]))\n\n(defui copy-to-clipboard [{:keys [monaco]} _]\n  (let [[monaco _] (rehook/use-atom monaco)\n        initial-copy-text \"Copy code to clipboard\"\n        [copy-text set-copy-text] (rehook/use-state initial-copy-text)]\n\n    (rehook/use-effect\n     (fn []\n       (if-not (= copy-text initial-copy-text)\n         (let [f (js/setTimeout #(set-copy-text initial-copy-text) 1000)]\n           #(js/clearTimeout f))\n         (constantly nil)))\n     [copy-text])\n\n    [:div.button {:onClick #(if (editor/copy-to-clipboard monaco)\n                              (set-copy-text \"Copied to clipboard!\")\n                              (set-copy-text \"Failed to copy to clipboard :(\"))}\n     copy-text]))\n\n(defui deps-edn [{:keys [compiler-state db]} _]\n  (let [[version _] (rehook/use-atom-path db [:version])\n        [cljs-version _] (rehook/use-atom-path db [:manifest version :clojurescript/version])\n        [nses _] (rehook/use-atom-fn compiler-state\n                                     #(set (keys (:cljs.analyzer/namespaces %)))\n                                     (constantly nil))\n        [libraries _] (rehook/use-atom-path db [:manifest version :sandbox/libraries])\n        clj-deps (->> libraries\n                      (filter (fn [{:keys [require]}]\n                                (some (fn [[r & _]]\n                                        (contains? nses r))\n                                      require)))\n                      (filter #(= :cljs (:type %)))\n                      (keep :coord))]\n    [highlight (with-out-str\n                (pprint/pprint\n                 {:deps (into {'org.clojure/clojurescript {:mvn/version cljs-version}}\n                              (map (fn [[dep coord]]\n                                     [(symbol dep) {:mvn/version coord}])\n                                   clj-deps))}))]))\n\n(defui export [{:keys [db]} _]\n  (let [[selected-tab _] (rehook/use-atom-path db [:selected-tab])\n        [version _] (rehook/use-atom-path db [:version])\n        [sandbox-version set-sandbox-version] (rehook/use-state \"stable\")]\n    [:div.cljspad-export\n     {:style (when-not (= selected-tab :export)\n               {:display \"none\"})}\n     [:h1 \"Export instructions\"]\n\n     [:h3 \"Export Options\"]\n     [:label \"Sandbox version: \"]\n     [:select {:onChange #(set-sandbox-version (-> % .-target .-value))\n               :value sandbox-version}\n      [:option {:value \"stable\"}\n       \"Stable\"]\n      [:option {:value \"latest\"}\n       \"Latest\"]]\n     [:h3 \"GitHub Gist\"]\n     [:p \"Your cljspad creation can be exported by creating a new public GitHub \"\n      [:a {:href \"https://gist.github.com\" :target \"_blank\"} \"gist\"]]\n     [copy-to-clipboard]\n\n     [:h3 \"Sharing\"]\n     [:p \"Once you have created a gist, you can use this link to share your creation:\"]\n     [highlight (if (= \"stable\" sandbox-version)\n                  (str \"https://cljspad.dev/gist/\" version \"/GIST_ID\")\n                  (str \"https://cljspad.dev/gist/GIST_ID\"))]\n     [:p \"Where \" [:samp \"GIST_ID\"] \" is the id of your freshly created gist (found in the navbar)\"]\n\n     [:h3 \"Embedding\"]\n     [:p \"If you would like to embed your creation, you can add this iframe to your website:\"]\n     [highlight (if (= \"stable\" sandbox-version)\n                  (str \"<iframe src=\\\"\" \"https://cljsfiddlle.dev/embed/\" version \"/GIST_ID\\\" width=\\\"100%\\\" height=\\\"400px\\\" style=\\\"border:1px solid #ccc;\\\"></iframe>\")\n                  (str \"<iframe src=\\\"\" \"https://cljsfiddlle.dev/embed/GIST_ID\\\" \" \"\\\"width=\\\"100%\\\" height=\\\"400px\\\" style=\\\"border:1px solid #ccc;\\\"></iframe>\"))]\n     [:p \"You can configure cljspad by passing through the following query params:\"]\n     [:ul\n      [:li [:samp \"selected_tab\"] \" - (enum) the initial tab on load. Options: sandbox, repl, editor (default: editor)\"]\n      [:li [:samp \"defer_load\"] \" - (bool) whether to defer the loading of cljspad (default: true)\"]]\n\n     [:h3 \"Clojure project\"]\n     [:p \"If you would like to build a Clojure project out of your creation:\"]\n     [:h4 \"deps.edn\"]\n     [deps-edn]\n     [:h4 \"shadow-cljs.edn\"]\n     [highlight (with-out-str\n                 (pprint/pprint\n                  '{:deps   true\n                    :builds {:app {:target  :browser\n                                   :modules {:base {:entries [app.main]}}}}}))]\n     [:h4 \"src/app/main.cljs\"]\n     [copy-to-clipboard]]))\n"]}